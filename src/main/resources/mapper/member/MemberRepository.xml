<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.ssafy.priends.domain.member.mapper.MemberMapper">

	<select id="emailCheckMember" parameterType="String">
		select count(id)
		from members
		where email = #{memberEmail}
	</select>
	
	<!-- 회원가입  -->
	<!-- ID값은 AUTO_INCREMENT로 생성된 PK값이므로 -->
	<!-- useGeneratedKeys와 keyProperty 속성을 사용하여 회원가입 이후 해당 속성을 바로 사용 가능 -->
	<insert id="signUpMember" parameterType="memberDto" useGeneratedKeys="true" keyProperty="id">
    	insert into members (email, password, nickname, image, status, alarm, role)
    	values (#{email}, #{password}, #{nickname}, #{image}, #{status}, #{alarm}, #{role})
	</insert>

	<!-- 회원정보 수정 -->
	<update id="updateMember" parameterType="memberDto">
		update members set nickname = #{nickname}, alarm = #{alarm}, image = #{image}
		where id = #{id}
	</update>

	<!-- 회원정보 조회-->
	<select id="getMember" parameterType="Long" resultType="memberGetDto">
		select email, nickname, image, alarm
		from members
		where id = #{id}
	</select>

	<!-- 회원 탈퇴 (회원정보 삭제하면 다른 테이블과 외래키로 묶여있여서 삭제는 안하고 회원탈퇴 여부를 나타내는 컬럼인 status 상태만 변경 -->
	<update id="deleteMember" parameterType="Long">
		update members set status = true
		where id = #{id}
	</update>

	<!-- 이메일을 통한 로그인 시 해당 회원 정보 가져오기 -->
	<select id="loginCheckMember" parameterType="memberLoginRequestDto" resultType="memberDto">
		select id, email, password, nickname, image, status, alarm, role
		from members
		where email = #{email}
	</select>

	<!-- 비밀번호 찾기  -->
	<!-- 나중에 수정해줘야함! (지금은 비밀번호 찾기지만 임시비밀번호 이메일로 발송하는 기능으로 수정 예정 -->
	<select id="getPasswordMember" parameterType="Long">
 		select password
 		from members
 		where id = #{id}
 	</select>

	<!-- 현재 로그인 되어 있는 고유 ID를 통한 로그인 된 회원 정보 가져오기 -->
	<select id="loginIdCheckMember" parameterType="Long" resultType="memberDto">
 		select id, email, password, nickname, image, status, alarm, role
 		from members
 		where id = #{id}
 	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePasswordMember" parameterType="memberPasswordUpdateDto">
		update members set password = #{changePassword}
		where id = #{id}
	</update>

	<!-- 이메일을 통한 회원정보 불러오기 -->
	<select id="byEmailFindMember" parameterType="String" resultType="memberDto">
		select id, email, password, nickname, image, status, alarm, role
		from members
		where email = #{email};
	</select>
</mapper>